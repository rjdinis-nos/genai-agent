name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test environment file
      run: |
        echo "GEMINI_API_KEY=test_key_for_ci" > .env
        
    - name: Build test image
      run: |
        docker compose -f scripts/compose/docker-compose.test.yml build
        
    - name: Run tests
      run: |
        docker compose -f scripts/compose/docker-compose.test.yml --profile test run --rm fastapi-test
        
    - name: Cleanup test containers
      if: always()
      run: |
        docker compose -f scripts/compose/docker-compose.test.yml --profile test down || true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Digest: ${{ needs.build.outputs.image-digest }}"
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/ or docker-compose up -d
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests against staging..."
        # Add smoke test commands here
        # Example: curl -f http://staging.example.com/docs

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Digest: ${{ needs.build.outputs.image-digest }}"
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/ or docker-compose up -d
        
    - name: Run health checks
      run: |
        echo "üè• Running health checks against production..."
        # Add health check commands here
        # Example: curl -f http://api.example.com/docs
        
    - name: Notify deployment success
      run: |
        echo "‚úÖ Production deployment successful!"
        # Add notification commands here (Slack, Discord, etc.)

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "üßπ Cleaning up old container images..."
        # Add cleanup commands for old images/artifacts
