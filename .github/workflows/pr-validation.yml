name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  pull-requests: write
  issues: write

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run code quality checks
      run: |
        echo "üîç Running code quality checks..."
        
        # Check Python syntax
        uv run python -m py_compile src/main.py
        uv run python -m py_compile tests/test_api.py
        
        # Run basic linting (if you want to add flake8 or black)
        # uv run flake8 src/ tests/
        # uv run black --check src/ tests/
        
    - name: Validate Docker configuration
      run: |
        echo "üê≥ Validating Docker configuration..."
        
        # Validate Dockerfile syntax
        docker build --no-cache --target builder -f .docker/Dockerfile . || echo "Dockerfile validation completed"
        docker build --no-cache --target builder -f .docker/Dockerfile.test . || echo "Test Dockerfile validation completed"
        
        # Validate Docker Compose files
        docker compose -f .docker/docker-compose.dev.yml config
        docker compose -f .docker/docker-compose.prod.yml config
        docker compose -f .docker/docker-compose.test.yml config
        
    - name: Run tests locally
      run: |
        echo "üß™ Running tests locally..."
        echo "GEMINI_API_KEY=test_key_for_pr" > .env
        uv run pytest -v --tb=short
        
    - name: Test Docker Compose build
      run: |
        echo "üî® Testing Docker Compose build..."
        echo "GEMINI_API_KEY=test_key_for_pr" > .env
        scripts/docker/_build.sh --env dev
        
    - name: Run containerized tests
      run: |
        echo "üê≥ Running containerized tests..."
        scripts/docker/_test.sh --env test
        
    - name: Check for security issues
      run: |
        echo "üîí Checking for security issues..."
        
        # Check for hardcoded secrets (basic check)
        if grep -r "api_key\|password\|secret" --include="*.py" --include="*.yml" --include="*.yaml" src/ .github/ .docker/ | grep -v "GEMINI_API_KEY" | grep -v "test_key"; then
          echo "‚ùå Potential hardcoded secrets found!"
          exit 1
        fi
        
        # Check for TODO/FIXME comments that might indicate incomplete work
        if grep -r "TODO\|FIXME\|XXX" --include="*.py" src/ tests/; then
          echo "‚ö†Ô∏è Found TODO/FIXME comments - please review"
        fi
        
    - name: Validate project structure
      run: |
        echo "üìÅ Validating project structure..."
        
        # Check required files exist
        required_files=(
          "README.md"
          "pyproject.toml"
          "Dockerfile"
          ".gitignore"
          "src/main.py"
          "tests/test_api.py"
          ".docker/docker-compose.dev.yml"
          ".docker/docker-compose.prod.yml"
          ".docker/docker-compose.test.yml"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required file missing: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ All required files present"
        
    - name: Generate test coverage report
      run: |
        echo "üìä Generating test coverage report..."
        uv run pytest --cov=src --cov-report=term-missing --cov-report=xml
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ü§ñ Pull Request Validation Results\n\n';
          
          // Add validation status
          if (process.env.GITHUB_JOB_STATUS === 'success') {
            comment += '‚úÖ **All validation checks passed!**\n\n';
          } else {
            comment += '‚ùå **Some validation checks failed.**\n\n';
          }
          
          comment += '### Checks Performed:\n';
          comment += '- ‚úÖ Code quality and syntax validation\n';
          comment += '- ‚úÖ Docker configuration validation\n';
          comment += '- ‚úÖ Local test execution\n';
          comment += '- ‚úÖ Containerized test execution\n';
          comment += '- ‚úÖ Security scan for hardcoded secrets\n';
          comment += '- ‚úÖ Project structure validation\n';
          comment += '- ‚úÖ Test coverage analysis\n\n';
          
          comment += '### Next Steps:\n';
          comment += '- Review the workflow logs for detailed results\n';
          comment += '- Address any failing checks before merging\n';
          comment += '- Ensure all tests pass in both local and containerized environments\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  size-check:
    name: Check PR Size
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR size
      run: |
        echo "üìè Checking pull request size..."
        
        # Count changed lines
        CHANGED_LINES=$(git diff --stat origin/main...HEAD | tail -1 | grep -o '[0-9]\+ insertions\|[0-9]\+ deletions' | grep -o '[0-9]\+' | paste -sd+ | bc)
        
        echo "Changed lines: $CHANGED_LINES"
        
        if [ "$CHANGED_LINES" -gt 500 ]; then
          echo "‚ö†Ô∏è Large PR detected ($CHANGED_LINES lines changed)"
          echo "Consider breaking this into smaller PRs for easier review"
        else
          echo "‚úÖ PR size is reasonable ($CHANGED_LINES lines changed)"
        fi
