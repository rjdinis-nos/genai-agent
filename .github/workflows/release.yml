name: Release & Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write
  issues: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
        else
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="false"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "üìã Release version: $VERSION"
        echo "üìã Is prerelease: $IS_PRERELEASE"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v1.0.0-beta"
          exit 1
        fi
        echo "‚úÖ Version format is valid"
        
    - name: Check if version exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git tag -l | grep -q "^$VERSION$"; then
          echo "‚ùå Version $VERSION already exists"
          exit 1
        fi
        echo "‚úÖ Version $VERSION is new"

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest,enable=${{ needs.validate-release.outputs.is-prerelease == 'false' }}
          
    - name: Build and push release image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM as release asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: sbom.spdx.json
        asset_name: sbom.spdx.json
        asset_content_type: application/json

  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    
    steps:
    - name: Run comprehensive security scan
      uses: aquasecurity/trivy-action@0.32.0
      with:
        image-ref: ${{ needs.build-release.outputs.image-tag }}
        format: 'json'
        output: 'trivy-results.json'
        
    - name: Check for critical vulnerabilities
      run: |
        if [ -f trivy-results.json ]; then
          CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json)
          HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json)
          
          echo "üîç Security scan results:"
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found in release image!"
            echo "Please fix critical vulnerabilities before releasing"
            exit 1
          fi
          
          if [ "$HIGH_COUNT" -gt 5 ]; then
            echo "‚ö†Ô∏è High number of high-severity vulnerabilities ($HIGH_COUNT)"
            echo "Consider addressing these before release"
          fi
        fi
        
    - name: Upload security scan results
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: trivy-results.json
        asset_name: security-scan-results.json
        asset_content_type: application/json

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, security-scan-release]
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to environment
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        VERSION="${{ needs.validate-release.outputs.version }}"
        IMAGE="${{ needs.build-release.outputs.image-tag }}"
        
        echo "üöÄ Deploying $VERSION to $ENVIRONMENT"
        echo "üì¶ Image: $IMAGE"
        
        # Example deployment commands - customize for your infrastructure
        case $ENVIRONMENT in
          "production")
            echo "üè≠ Deploying to production..."
            # kubectl set image deployment/fastapi-app fastapi-app=$IMAGE
            # helm upgrade fastapi-app ./helm-chart --set image.tag=$VERSION
            # docker-compose -f docker-compose.prod.yml up -d
            ;;
          "staging")
            echo "üß™ Deploying to staging..."
            # kubectl set image deployment/fastapi-app-staging fastapi-app=$IMAGE
            # helm upgrade fastapi-app-staging ./helm-chart --set image.tag=$VERSION
            # docker-compose -f docker-compose.staging.yml up -d
            ;;
        esac
        
    - name: Run post-deployment tests
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        echo "üß™ Running post-deployment tests for $ENVIRONMENT..."
        
        # Health check
        case $ENVIRONMENT in
          "production")
            ENDPOINT="https://api.yourdomain.com"
            ;;
          "staging")
            ENDPOINT="https://staging-api.yourdomain.com"
            ;;
        esac
        
        # Wait for deployment to be ready
        sleep 30
        
        # Basic health checks
        echo "Checking $ENDPOINT/docs..."
        # curl -f "$ENDPOINT/docs" || exit 1
        
        echo "‚úÖ Post-deployment tests passed"
        
    - name: Create deployment record
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: '${{ github.event.inputs.environment || "production" }}',
            description: 'Release deployment ${{ needs.validate-release.outputs.version }}',
            auto_merge: false
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            description: 'Deployment successful',
            environment_url: 'https://api.yourdomain.com'
          });

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, deploy-release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-release.result == 'success'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        echo "üéâ Release $VERSION deployed successfully to $ENVIRONMENT!"
        
        # Add your notification logic here:
        # - Slack webhook
        # - Discord webhook
        # - Email notification
        # - Teams notification
        
        # Example Slack notification (requires SLACK_WEBHOOK_URL secret)
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üéâ FastAPI App '$VERSION' deployed to '$ENVIRONMENT'!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify failure
      if: needs.deploy-release.result == 'failure'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        echo "‚ùå Release $VERSION deployment to $ENVIRONMENT failed!"
        
        # Add your failure notification logic here
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"‚ùå FastAPI App '$VERSION' deployment to '$ENVIRONMENT' failed!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Rollback deployment
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        echo "üîÑ Rolling back deployment in $ENVIRONMENT..."
        
        # Add your rollback logic here:
        # kubectl rollout undo deployment/fastapi-app
        # helm rollback fastapi-app
        # docker-compose down && docker-compose up -d --scale fastapi-app=0
        
        echo "‚úÖ Rollback completed"
